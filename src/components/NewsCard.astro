---
import { formatDate } from '../utils/formatDate';

interface Props {
  post: any; // In a real implementation, you would type this properly
  featured?: boolean;
}

const { post, featured = false } = Astro.props;
const { slug, data } = post;
const { title, description, pubDate, coverImage, author } = data;

// Format date
const formattedDate = formatDate(pubDate);

// Determine the URL based on the collection entry
const postUrl = `/news/${slug}`;
---

<article class={`news-card ${featured ? 'featured' : ''}`}>
  {
    coverImage && (
      <a href={postUrl} class='card-image-link'>
        <img
          src={coverImage}
          alt={title}
          class='card-image'
          width='800'
          height='500'
          loading='lazy'
        />
      </a>
    )
  }

  <div class='card-content'>
    <div class='card-meta'>
      <time datetime={pubDate}>{formattedDate}</time>
      {author && <span class='card-author'>By {author}</span>}
    </div>

    <h3 class='card-title'>
      <a href={postUrl}>{title}</a>
    </h3>

    {description && <p class='card-description'>{description}</p>}

    <a href={postUrl} class='card-read-more'>
      Read article
      <span class='sr-only'>about {title}</span>
      <span class='arrow-icon'>→</span>
    </a>
  </div>
</article>

<style>
  .news-card {
    display: flex;
    flex-direction: column;
    background-color: var(--color-background);
    border-radius: 0.5rem;
    overflow: hidden;
    box-shadow:
      0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -1px rgba(0, 0, 0, 0.06);
    height: 100%;
    transition:
      transform 0.2s,
      box-shadow 0.2s;
  }

  .news-card:hover {
    transform: translateY(-5px);
    box-shadow:
      0 10px 15px -3px rgba(0, 0, 0, 0.1),
      0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }

  .news-card.featured {
    grid-column: span 1;
  }

  @media (min-width: 768px) {
    .news-card.featured {
      grid-column: span 2;
    }
  }

  .card-image-link {
    display: block;
    position: relative;
    overflow: hidden;
    aspect-ratio: 16 / 9;
  }

  .card-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .card-image-link:hover .card-image {
    transform: scale(1.05);
  }

  .card-content {
    padding: 1.5rem;
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .card-meta {
    display: flex;
    gap: 1rem;
    font-size: 0.875rem;
    color: var(--color-text-light);
    margin-bottom: 0.75rem;
  }

  .card-author {
    position: relative;
  }

  .card-author::before {
    content: '•';
    position: absolute;
    left: -0.6rem;
  }

  .card-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
    line-height: 1.3;
  }

  .featured .card-title {
    font-size: 1.5rem;
  }

  .card-title a {
    color: var(--color-text);
    text-decoration: none;
    transition: color 0.2s;
  }

  .card-title a:hover {
    color: var(--color-primary);
  }

  .card-description {
    color: var(--color-text-light);
    margin-bottom: 1.25rem;
    flex: 1;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .card-read-more {
    display: inline-flex;
    align-items: center;
    gap: 0.375rem;
    color: var(--color-primary);
    font-weight: 500;
    text-decoration: none;
    margin-top: auto;
    transition: color 0.2s;
  }

  .card-read-more:hover {
    color: var(--color-primary-dark);
  }

  .arrow-icon {
    transition: transform 0.2s;
  }

  .card-read-more:hover .arrow-icon {
    transform: translateX(3px);
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
</style>
